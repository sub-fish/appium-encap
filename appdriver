# coding=utf-8

from appium import webdriver
from selenium.webdriver.common.by import By
import os
import time


class PlatForm(object):
    def __init__(self, pVersiondName, pName, dName, aPackage, aActivity):
        self.platformVersion = pVersiondName
        self.platformName = pName
        self.deviceName = dName
        self.appPackage = aPackage
        self.appActivity = aActivity

        self.desired_caps = {}
        self.desired_caps['platformName'] = self.platformName
        self.desired_caps['platformVersion'] = self.platformVersion
        self.desired_caps['deviceName'] = self.deviceName
        self.desired_caps['appPackage'] = self.appPackage
        self.desired_caps['appActivity'] = self.appActivity
        self.driver = webdriver.Remote('http://localhost:4723/wd/hub', self.desired_caps)

        time.sleep(10)

        # 重新封装单个元素定位方法
        def find_element(self, loc):
            try:
                from selenium.webdriver.support.wait import WebDriverWait
                WebDriverWait(self.driver, 15).until(lambda driver: driver.find_element(*loc).is_displayed())
                return self.driver.find_element(*loc)
            except:
                print u"%s 页面中未能找到 %s 元素" % (self, loc)

            # 重新封装一组元素定位方法

        def find_elements(self, loc):
            try:
                if len(self.driver.find_elements(*loc)):
                    return self.driver.find_elements(*loc)
            except:
                print u"%s 页面中未能找到 %s 元素" % (self, loc)

            # 重新封装输入方法

        def send_keys(self, loc, value, clear_first=True, click_first=True):
            try:
                if click_first:
                    self.find_element(loc).click()
                if clear_first:
                    self.find_element(loc).clear()
                self.find_element(loc).send_keys(value)
            except AttributeError:
                print "%s 页面未能找到 %s 元素" % (self, loc)

            # 重新封装按钮点击方法

        def clickButton(self, loc, find_first=True):
            try:
                if find_first:
                    self.find_element(loc)
                self.find_element(loc).click()
            except AttributeError:
                print "%s 页面未能找到 %s 按钮" % (self, loc)

        # savePngName:生成图片的名称
        def savePngName(self, name):

        #name：自定义图片的名称

            day = time.strftime('%Y-%m-%d', time.localtime(time.time()))
            fp = "Result\\" + day + "\\image\\" + day
            tm = self.saveTime()
            type = ".png"
            if os.path.exists(fp):
                filename = fp + "\\" + tm + "_" + name + type
                print filename
                # print "True"
                return filename
            else:
                os.makedirs(fp)
                filename = fp + "\\" + tm + "_" + name + type
                print filename
                # print "False"
                return filename

        # 获取系统当前时间
        def saveTime(self):
            #返回当前系统时间展示
            return time.strftime('%Y-%m-%d-%H_%M_%S', time.localtime(time.time()))

        # saveScreenshot:通过图片名称，进行截图保存
        def saveScreenshot(self, name):
                # 快照截图
                # name:图片名称
                # 获取当前路径
                 # print os.getcwd()
                self.image = self.driver.save_screenshot(self.savePngName(name))
                return self.image
     def getels(self, lo):
        #关键在于传参，只有在这一级才会有使用*号解析字典
        return self.driver.find_element(*lo)

    def elssendkey(self):
        #此处传参无需*
        self.getels(self.d9).click()
        self.getels(self.d2).click()
               




if __name__ == '__main__':
    test1=PlatForm(pVersiondName='4.3',pName='Android',dName='192.168.199.101:5555',aPackage='com.android.calculator2',aActivity='.Calculator')
    test1.elssendkey()
